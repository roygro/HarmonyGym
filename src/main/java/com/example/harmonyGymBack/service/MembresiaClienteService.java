package com.example.harmonyGymBack.service;

import com.example.harmonyGymBack.model.Cliente;
import com.example.harmonyGymBack.model.Membresia;
import com.example.harmonyGymBack.model.MembresiaCliente;
import com.example.harmonyGymBack.repository.ClienteRepository;
import com.example.harmonyGymBack.repository.MembresiaClienteRepository;
import com.example.harmonyGymBack.repository.MembresiaRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Service
@Transactional
public class MembresiaClienteService {

    @Autowired
    private MembresiaClienteRepository membresiaClienteRepository;

    @Autowired
    private ClienteRepository clienteRepository;

    @Autowired
    private MembresiaRepository membresiaRepository;

    // ==================== ASIGNAR MEMBRES√çA A CLIENTE ====================

    public MembresiaCliente asignarMembresiaACliente(String folioCliente, String idMembresia, LocalDate fechaInicio) {
        System.out.println("üöÄ Asignando membres√≠a al cliente: " + folioCliente);

        // Verificar que el cliente existe y est√° activo
        Cliente cliente = clienteRepository.findById(folioCliente)
                .orElseThrow(() -> new RuntimeException("Cliente no encontrado: " + folioCliente));

        if (!"Activo".equals(cliente.getEstatus())) {
            throw new RuntimeException("El cliente no est√° activo");
        }

        // Verificar que la membres√≠a existe y est√° activa
        Membresia membresia = membresiaRepository.findById(idMembresia)
                .orElseThrow(() -> new RuntimeException("Membres√≠a no encontrada: " + idMembresia));

        if (!"Activa".equals(membresia.getEstatus())) {
            throw new RuntimeException("La membres√≠a no est√° activa");
        }

        // Verificar que el cliente no tenga membres√≠a activa
        if (membresiaClienteRepository.existsByClienteFolioClienteAndEstatus(folioCliente, "Activa")) {
            throw new RuntimeException("El cliente ya tiene una membres√≠a activa");
        }

        // Crear la nueva membres√≠a para el cliente
        MembresiaCliente nuevaMembresia = new MembresiaCliente(cliente, membresia, fechaInicio);

        MembresiaCliente membresiaGuardada = membresiaClienteRepository.save(nuevaMembresia);
        System.out.println("‚úÖ Membres√≠a asignada exitosamente: " + membresiaGuardada.getIdMembresiaCliente());

        return membresiaGuardada;
    }

    // ==================== RENOVAR MEMBRES√çA ====================

    // ==================== RENOVAR MEMBRES√çA ====================

    public MembresiaCliente renovarMembresia(Long idMembresiaCliente) {
        System.out.println("üîÑ Renovando membres√≠a: " + idMembresiaCliente);

        MembresiaCliente membresiaActual = membresiaClienteRepository.findById(idMembresiaCliente)
                .orElseThrow(() -> new RuntimeException("Membres√≠a no encontrada: " + idMembresiaCliente));

        String folioCliente = membresiaActual.getCliente().getFolioCliente();
        String estatusActual = membresiaActual.getEstatus();

        System.out.println("üìä Estatus actual: " + estatusActual + ", Cliente: " + folioCliente);

        // Verificar si el cliente ya tiene otra membres√≠a activa (excluyendo esta)
        boolean tieneOtraMembresiaActiva = membresiaClienteRepository
                .existsByClienteFolioClienteAndEstatusAndIdMembresiaClienteNot(
                        folioCliente, "Activa", idMembresiaCliente);

        if (tieneOtraMembresiaActiva) {
            throw new RuntimeException("El cliente ya tiene otra membres√≠a activa. Cancele la actual antes de renovar.");
        }

        // L√≥gica seg√∫n el estatus actual
        switch (estatusActual) {
            case "Activa":
                System.out.println("üîµ Renovando membres√≠a ACTIVA");
                // Marcar la membres√≠a actual como inactiva y crear nueva
                membresiaActual.setEstatus("Inactiva");
                membresiaClienteRepository.save(membresiaActual);

                // Crear nueva membres√≠a comenzando al d√≠a siguiente de la fecha fin
                LocalDate nuevaFechaInicio = membresiaActual.getFechaFin().plusDays(1);
                MembresiaCliente nuevaMembresia = new MembresiaCliente(
                        membresiaActual.getCliente(),
                        membresiaActual.getMembresia(),
                        nuevaFechaInicio
                );
                return membresiaClienteRepository.save(nuevaMembresia);

            case "Expirada":
            case "Cancelada":
                System.out.println("üü° Reactivando membres√≠a " + estatusActual);
                // Crear una nueva membres√≠a basada en la existente (comenzando hoy)
                MembresiaCliente membresiaReactivada = new MembresiaCliente(
                        membresiaActual.getCliente(),
                        membresiaActual.getMembresia(),
                        LocalDate.now() // Comenzar hoy
                );
                return membresiaClienteRepository.save(membresiaReactivada);

            case "Inactiva":
                System.out.println("üü† Reactivando membres√≠a INACTIVA");
                // Reactivar la membres√≠a existente
                membresiaActual.setEstatus("Activa");
                // Si la fecha fin ya pas√≥, extenderla
                if (membresiaActual.getFechaFin().isBefore(LocalDate.now())) {
                    LocalDate nuevaFechaFin = LocalDate.now().plusDays(membresiaActual.getMembresia().getDuracion());
                    membresiaActual.setFechaFin(nuevaFechaFin);
                    System.out.println("üìÖ Extendiendo fecha fin a: " + nuevaFechaFin);
                }
                return membresiaClienteRepository.save(membresiaActual);

            default:
                throw new RuntimeException("No se puede renovar una membres√≠a con estatus: " + estatusActual);
        }
    }

    // ==================== CANCELAR MEMBRES√çA ====================

    public MembresiaCliente cancelarMembresia(Long idMembresiaCliente) {
        System.out.println("‚ùå Cancelando membres√≠a: " + idMembresiaCliente);

        MembresiaCliente membresia = membresiaClienteRepository.findById(idMembresiaCliente)
                .orElseThrow(() -> new RuntimeException("Membres√≠a no encontrada: " + idMembresiaCliente));

        if (!"Activa".equals(membresia.getEstatus())) {
            throw new RuntimeException("Solo se pueden cancelar membres√≠as activas");
        }

        membresia.setEstatus("Cancelada");
        MembresiaCliente membresiaCancelada = membresiaClienteRepository.save(membresia);

        System.out.println("‚úÖ Membres√≠a cancelada: " + idMembresiaCliente);
        return membresiaCancelada;
    }

    // ==================== CONSULTAS ====================

    public MembresiaCliente obtenerMembresiaActiva(String folioCliente) {
        return membresiaClienteRepository.findByClienteFolioClienteAndEstatus(folioCliente, "Activa")
                .orElseThrow(() -> new RuntimeException("El cliente no tiene membres√≠a activa"));
    }

    public List<MembresiaCliente> obtenerHistorialMembresias(String folioCliente) {
        return membresiaClienteRepository.findByClienteFolioClienteOrderByFechaInicioDesc(folioCliente);
    }

    public List<MembresiaCliente> obtenerTodasMembresiasActivas() {
        return membresiaClienteRepository.findByEstatus("Activa");
    }

    public List<MembresiaCliente> obtenerMembresiasPorExpirar(int dias) {
        LocalDate hoy = LocalDate.now();
        LocalDate fechaLimite = hoy.plusDays(dias);
        return membresiaClienteRepository.findMembresiasPorExpirar(hoy, fechaLimite);
    }

    // ==================== VERIFICAR ACCESO ====================

    public Map<String, Object> verificarAccesoCliente(String folioCliente) {
        Map<String, Object> resultado = new HashMap<>();

        try {
            MembresiaCliente membresia = obtenerMembresiaActiva(folioCliente);

            if (membresia.isExpirada()) {
                // Actualizar autom√°ticamente a expirada
                membresia.setEstatus("Expirada");
                membresiaClienteRepository.save(membresia);

                resultado.put("accesoPermitido", false);
                resultado.put("motivo", "Membres√≠a expirada");
            } else {
                resultado.put("accesoPermitido", true);
                resultado.put("membresia", membresia.getMembresia().getTipo());
                resultado.put("fechaFin", membresia.getFechaFin());
                resultado.put("diasRestantes", java.time.temporal.ChronoUnit.DAYS.between(LocalDate.now(), membresia.getFechaFin()));
            }

        } catch (RuntimeException e) {
            resultado.put("accesoPermitido", false);
            resultado.put("motivo", "No tiene membres√≠a activa");
        }

        return resultado;
    }

    // ==================== ACTUALIZAR MEMBRES√çAS EXPIRADAS ====================

    @Transactional
    public int actualizarMembresiasExpiradas() {
        LocalDate hoy = LocalDate.now();
        int actualizadas = membresiaClienteRepository.actualizarMembresiasExpiradas(hoy);
        System.out.println("üîÑ Membres√≠as expiradas actualizadas: " + actualizadas);
        return actualizadas;
    }

    // ==================== ESTAD√çSTICAS ====================

    public Map<String, Object> obtenerEstadisticasMembresias() {
        Map<String, Object> estadisticas = new HashMap<>();

        Long totalMembresias = membresiaClienteRepository.count();
        Long membresiasActivas = membresiaClienteRepository.countByEstatus("Activa");
        Long membresiasInactivas = membresiaClienteRepository.countByEstatus("Inactiva");
        Long membresiasExpiradas = membresiaClienteRepository.countByEstatus("Expirada");
        Long membresiasCanceladas = membresiaClienteRepository.countByEstatus("Cancelada");

        List<MembresiaCliente> porExpirar = obtenerMembresiasPorExpirar(7);

        estadisticas.put("totalMembresias", totalMembresias);
        estadisticas.put("membresiasActivas", membresiasActivas);
        estadisticas.put("membresiasInactivas", membresiasInactivas);
        estadisticas.put("membresiasExpiradas", membresiasExpiradas);
        estadisticas.put("membresiasCanceladas", membresiasCanceladas);
        estadisticas.put("membresiasPorExpirar7Dias", porExpirar.size());
        estadisticas.put("porcentajeActivas", totalMembresias > 0 ? (membresiasActivas * 100.0 / totalMembresias) : 0);

        return estadisticas;
    }

    // ==================== CAMBIAR MEMBRES√çA ====================

    public MembresiaCliente cambiarMembresiaCliente(Long idMembresiaCliente, String nuevaIdMembresia) {
        System.out.println("üîÑ Cambiando membres√≠a: " + idMembresiaCliente);

        MembresiaCliente membresiaActual = membresiaClienteRepository.findById(idMembresiaCliente)
                .orElseThrow(() -> new RuntimeException("Membres√≠a no encontrada: " + idMembresiaCliente));

        if (!"Activa".equals(membresiaActual.getEstatus())) {
            throw new RuntimeException("Solo se pueden cambiar membres√≠as activas");
        }

        Membresia nuevaMembresia = membresiaRepository.findById(nuevaIdMembresia)
                .orElseThrow(() -> new RuntimeException("Nueva membres√≠a no encontrada: " + nuevaIdMembresia));

        if (!"Activa".equals(nuevaMembresia.getEstatus())) {
            throw new RuntimeException("La nueva membres√≠a no est√° activa");
        }

        // Cancelar membres√≠a actual
        membresiaActual.setEstatus("Inactiva");

        // Crear nueva membres√≠a con la nueva configuraci√≥n
        MembresiaCliente nuevaMembresiaCliente = new MembresiaCliente(
                membresiaActual.getCliente(),
                nuevaMembresia,
                LocalDate.now()
        );

        MembresiaCliente membresiaCambiada = membresiaClienteRepository.save(nuevaMembresiaCliente);
        System.out.println("‚úÖ Membres√≠a cambiada exitosamente: " + membresiaCambiada.getIdMembresiaCliente());

        return membresiaCambiada;
    }

    public List<MembresiaCliente> obtenerTodasLasMembresias() {
        return membresiaClienteRepository.findAll(); // O el m√©todo equivalente de tu repository
    }
}